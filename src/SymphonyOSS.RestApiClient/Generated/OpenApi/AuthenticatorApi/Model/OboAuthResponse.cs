// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Authenticator API
 *
 * For bots and other on-premise processes to authenticate. Once authenticated, the bot will be able to use the methods described in serviceAPI.yaml and agentAPI.yaml.  Connections to the servers will be over client authenticated TLS, the servers for this API will perform the authentication by inspecting the certificate presented by the SSLSocketClient.  There will be two implementations of this API, one on your Pod and one on the Key Manager. In order to fully authenticate, an API client will have to call both of these implementations and pass both of the session tokens returned as headers in all subsequent requests to the Symphony API. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.SwaggerDateConverter;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Model
{
    /// <summary>
    /// OboAuthResponse
    /// </summary>
    [DataContract]
    public partial class OboAuthResponse :  IEquatable<OboAuthResponse>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OboAuthResponse" /> class.
        /// </summary>
        /// <param name="SessionToken">The token which should be passed. This should be considered opaque data by the client. It is not intended to conatain any data interpretable by the client. The format is secret and subject to change without notice..</param>
        public OboAuthResponse(string SessionToken = default(string))
        {
            this.SessionToken = SessionToken;
        }
        
        /// <summary>
        /// The token which should be passed. This should be considered opaque data by the client. It is not intended to conatain any data interpretable by the client. The format is secret and subject to change without notice.
        /// </summary>
        /// <value>The token which should be passed. This should be considered opaque data by the client. It is not intended to conatain any data interpretable by the client. The format is secret and subject to change without notice.</value>
        [DataMember(Name="sessionToken", EmitDefaultValue=false)]
        public string SessionToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OboAuthResponse {\n");
            sb.Append("  SessionToken: ").Append(SessionToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as OboAuthResponse);
        }

        /// <summary>
        /// Returns true if OboAuthResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of OboAuthResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OboAuthResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SessionToken == other.SessionToken ||
                    this.SessionToken != null &&
                    this.SessionToken.Equals(other.SessionToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SessionToken != null)
                    hash = hash * 59 + this.SessionToken.GetHashCode();
                return hash;
            }
        }
    }

}
