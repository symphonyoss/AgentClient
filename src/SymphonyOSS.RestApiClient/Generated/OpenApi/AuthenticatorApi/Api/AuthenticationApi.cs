// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Authenticator API
 *
 * For bots and other on-premise processes to authenticate. Once authenticated, the bot will be able to use the methods described in serviceAPI.yaml and agentAPI.yaml.  Connections to the servers will be over client authenticated TLS, the servers for this API will perform the authentication by inspecting the certificate presented by the SSLSocketClient.  There will be two implementations of this API, one on your Pod and one on the Key Manager. In order to fully authenticate, an API client will have to call both of these implementations and pass both of the session tokens returned as headers in all subsequent requests to the Symphony API. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp.Portable;
using SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client;
using SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Model;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Token</returns>
        Token V1AppAuthenticatePost ();

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> V1AppAuthenticatePostWithHttpInfo ();
        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>OboAuthResponse</returns>
        OboAuthResponse V1AppUserUidAuthenticatePost (long? uid, string sessionToken);

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>ApiResponse of OboAuthResponse</returns>
        ApiResponse<OboAuthResponse> V1AppUserUidAuthenticatePostWithHttpInfo (long? uid, string sessionToken);
        /// <summary>
        /// Authenticate a client-extension application
        /// </summary>
        /// <remarks>
        /// Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>ExtensionAppTokens</returns>
        ExtensionAppTokens V1AuthenticateExtensionAppPost (AuthenticateRequest authRequest);

        /// <summary>
        /// Authenticate a client-extension application
        /// </summary>
        /// <remarks>
        /// Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>ApiResponse of ExtensionAppTokens</returns>
        ApiResponse<ExtensionAppTokens> V1AuthenticateExtensionAppPostWithHttpInfo (AuthenticateRequest authRequest);
        /// <summary>
        /// Authenticate.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Token</returns>
        Token V1AuthenticatePost ();

        /// <summary>
        /// Authenticate.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Token</returns>
        ApiResponse<Token> V1AuthenticatePostWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> V1AppAuthenticatePostAsync ();

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> V1AppAuthenticatePostAsyncWithHttpInfo ();
        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>Task of OboAuthResponse</returns>
        System.Threading.Tasks.Task<OboAuthResponse> V1AppUserUidAuthenticatePostAsync (long? uid, string sessionToken);

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>Task of ApiResponse (OboAuthResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<OboAuthResponse>> V1AppUserUidAuthenticatePostAsyncWithHttpInfo (long? uid, string sessionToken);
        /// <summary>
        /// Authenticate a client-extension application
        /// </summary>
        /// <remarks>
        /// Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>Task of ExtensionAppTokens</returns>
        System.Threading.Tasks.Task<ExtensionAppTokens> V1AuthenticateExtensionAppPostAsync (AuthenticateRequest authRequest);

        /// <summary>
        /// Authenticate a client-extension application
        /// </summary>
        /// <remarks>
        /// Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>Task of ApiResponse (ExtensionAppTokens)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionAppTokens>> V1AuthenticateExtensionAppPostAsyncWithHttpInfo (AuthenticateRequest authRequest);
        /// <summary>
        /// Authenticate.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Token</returns>
        System.Threading.Tasks.Task<Token> V1AuthenticatePostAsync ();

        /// <summary>
        /// Authenticate.
        /// </summary>
        /// <remarks>
        /// Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Token)</returns>
        System.Threading.Tasks.Task<ApiResponse<Token>> V1AuthenticatePostAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Token</returns>
        public Token V1AppAuthenticatePost ()
        {
             ApiResponse<Token> localVarResponse = V1AppAuthenticatePostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > V1AppAuthenticatePostWithHttpInfo ()
        {

            var localVarPath = "./v1/app/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AppAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> V1AppAuthenticatePostAsync ()
        {
             ApiResponse<Token> localVarResponse = await V1AppAuthenticatePostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// PROVISIONAL - Authenticate an application in a delegated context. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return an application session. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> V1AppAuthenticatePostAsyncWithHttpInfo ()
        {

            var localVarPath = "./v1/app/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AppAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>OboAuthResponse</returns>
        public OboAuthResponse V1AppUserUidAuthenticatePost (long? uid, string sessionToken)
        {
             ApiResponse<OboAuthResponse> localVarResponse = V1AppUserUidAuthenticatePostWithHttpInfo(uid, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>ApiResponse of OboAuthResponse</returns>
        public ApiResponse< OboAuthResponse > V1AppUserUidAuthenticatePostWithHttpInfo (long? uid, string sessionToken)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling AuthenticationApi->V1AppUserUidAuthenticatePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling AuthenticationApi->V1AppUserUidAuthenticatePost");

            var localVarPath = "./v1/app/user/{uid}/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AppUserUidAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OboAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OboAuthResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OboAuthResponse)));
        }

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>Task of OboAuthResponse</returns>
        public async System.Threading.Tasks.Task<OboAuthResponse> V1AppUserUidAuthenticatePostAsync (long? uid, string sessionToken)
        {
             ApiResponse<OboAuthResponse> localVarResponse = await V1AppUserUidAuthenticatePostAsyncWithHttpInfo(uid, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PROVISIONAL - Authenicate an application in a delegated context to act on behalf of a user 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">user id</param>
        /// <param name="sessionToken">Authorization token obtains from app/authenicate API</param>
        /// <returns>Task of ApiResponse (OboAuthResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OboAuthResponse>> V1AppUserUidAuthenticatePostAsyncWithHttpInfo (long? uid, string sessionToken)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling AuthenticationApi->V1AppUserUidAuthenticatePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling AuthenticationApi->V1AppUserUidAuthenticatePost");

            var localVarPath = "./v1/app/user/{uid}/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AppUserUidAuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OboAuthResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (OboAuthResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OboAuthResponse)));
        }

        /// <summary>
        /// Authenticate a client-extension application Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>ExtensionAppTokens</returns>
        public ExtensionAppTokens V1AuthenticateExtensionAppPost (AuthenticateRequest authRequest)
        {
             ApiResponse<ExtensionAppTokens> localVarResponse = V1AuthenticateExtensionAppPostWithHttpInfo(authRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate a client-extension application Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>ApiResponse of ExtensionAppTokens</returns>
        public ApiResponse< ExtensionAppTokens > V1AuthenticateExtensionAppPostWithHttpInfo (AuthenticateRequest authRequest)
        {
            // verify the required parameter 'authRequest' is set
            if (authRequest == null)
                throw new ApiException(400, "Missing required parameter 'authRequest' when calling AuthenticationApi->V1AuthenticateExtensionAppPost");

            var localVarPath = "./v1/authenticate/extensionApp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authRequest != null && authRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AuthenticateExtensionAppPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionAppTokens>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ExtensionAppTokens) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionAppTokens)));
        }

        /// <summary>
        /// Authenticate a client-extension application Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>Task of ExtensionAppTokens</returns>
        public async System.Threading.Tasks.Task<ExtensionAppTokens> V1AuthenticateExtensionAppPostAsync (AuthenticateRequest authRequest)
        {
             ApiResponse<ExtensionAppTokens> localVarResponse = await V1AuthenticateExtensionAppPostAsyncWithHttpInfo(authRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate a client-extension application Based on the application&#39;s SSL client certificate presented by the TLS layer, it authenticates the client-extension application and return a symphony verification token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authRequest">application generated token</param>
        /// <returns>Task of ApiResponse (ExtensionAppTokens)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionAppTokens>> V1AuthenticateExtensionAppPostAsyncWithHttpInfo (AuthenticateRequest authRequest)
        {
            // verify the required parameter 'authRequest' is set
            if (authRequest == null)
                throw new ApiException(400, "Missing required parameter 'authRequest' when calling AuthenticationApi->V1AuthenticateExtensionAppPost");

            var localVarPath = "./v1/authenticate/extensionApp";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authRequest != null && authRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(authRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = authRequest; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AuthenticateExtensionAppPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionAppTokens>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (ExtensionAppTokens) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionAppTokens)));
        }

        /// <summary>
        /// Authenticate. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Token</returns>
        public Token V1AuthenticatePost ()
        {
             ApiResponse<Token> localVarResponse = V1AuthenticatePostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Authenticate. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Token</returns>
        public ApiResponse< Token > V1AuthenticatePostWithHttpInfo ()
        {

            var localVarPath = "./v1/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

        /// <summary>
        /// Authenticate. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Token</returns>
        public async System.Threading.Tasks.Task<Token> V1AuthenticatePostAsync ()
        {
             ApiResponse<Token> localVarResponse = await V1AuthenticatePostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Authenticate. Based on the SSL client certificate presented by the TLS layer, authenticate the API caller and return a session token. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.AuthenticatorApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Token)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Token>> V1AuthenticatePostAsyncWithHttpInfo ()
        {

            var localVarPath = "./v1/authenticate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AuthenticatePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Token>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => x.Value.ToString()),
                (Token) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Token)));
        }

    }
}
