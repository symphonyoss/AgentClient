// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.SwaggerDateConverter;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model
{
    /// <summary>
    /// additional optional properties for the stream
    /// </summary>
    [DataContract]
    public partial class AdminStreamAttributes :  IEquatable<AdminStreamAttributes>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminStreamAttributes" /> class.
        /// </summary>
        /// <param name="RoomName">room name (room only).</param>
        /// <param name="RoomDescription">description of the room (room only).</param>
        /// <param name="Members">list of userid who is member of the stream - im or mim only.</param>
        /// <param name="CreatedByUserId">creator user id.</param>
        /// <param name="CreatedDate">created date.</param>
        /// <param name="LastModifiedDate">last modified date.</param>
        /// <param name="OriginCompany">company name of the creator.</param>
        /// <param name="OriginCompanyId">company id of the creator.</param>
        /// <param name="MembersCount">total number of members in the stream.</param>
        public AdminStreamAttributes(string RoomName = default(string), string RoomDescription = default(string), List<long?> Members = default(List<long?>), long? CreatedByUserId = default(long?), long? CreatedDate = default(long?), long? LastModifiedDate = default(long?), string OriginCompany = default(string), int? OriginCompanyId = default(int?), int? MembersCount = default(int?))
        {
            this.RoomName = RoomName;
            this.RoomDescription = RoomDescription;
            this.Members = Members;
            this.CreatedByUserId = CreatedByUserId;
            this.CreatedDate = CreatedDate;
            this.LastModifiedDate = LastModifiedDate;
            this.OriginCompany = OriginCompany;
            this.OriginCompanyId = OriginCompanyId;
            this.MembersCount = MembersCount;
        }
        
        /// <summary>
        /// room name (room only)
        /// </summary>
        /// <value>room name (room only)</value>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }

        /// <summary>
        /// description of the room (room only)
        /// </summary>
        /// <value>description of the room (room only)</value>
        [DataMember(Name="roomDescription", EmitDefaultValue=false)]
        public string RoomDescription { get; set; }

        /// <summary>
        /// list of userid who is member of the stream - im or mim only
        /// </summary>
        /// <value>list of userid who is member of the stream - im or mim only</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<long?> Members { get; set; }

        /// <summary>
        /// creator user id
        /// </summary>
        /// <value>creator user id</value>
        [DataMember(Name="createdByUserId", EmitDefaultValue=false)]
        public long? CreatedByUserId { get; set; }

        /// <summary>
        /// created date
        /// </summary>
        /// <value>created date</value>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public long? CreatedDate { get; set; }

        /// <summary>
        /// last modified date
        /// </summary>
        /// <value>last modified date</value>
        [DataMember(Name="lastModifiedDate", EmitDefaultValue=false)]
        public long? LastModifiedDate { get; set; }

        /// <summary>
        /// company name of the creator
        /// </summary>
        /// <value>company name of the creator</value>
        [DataMember(Name="originCompany", EmitDefaultValue=false)]
        public string OriginCompany { get; set; }

        /// <summary>
        /// company id of the creator
        /// </summary>
        /// <value>company id of the creator</value>
        [DataMember(Name="originCompanyId", EmitDefaultValue=false)]
        public int? OriginCompanyId { get; set; }

        /// <summary>
        /// total number of members in the stream
        /// </summary>
        /// <value>total number of members in the stream</value>
        [DataMember(Name="membersCount", EmitDefaultValue=false)]
        public int? MembersCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminStreamAttributes {\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  RoomDescription: ").Append(RoomDescription).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  CreatedByUserId: ").Append(CreatedByUserId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastModifiedDate: ").Append(LastModifiedDate).Append("\n");
            sb.Append("  OriginCompany: ").Append(OriginCompany).Append("\n");
            sb.Append("  OriginCompanyId: ").Append(OriginCompanyId).Append("\n");
            sb.Append("  MembersCount: ").Append(MembersCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminStreamAttributes);
        }

        /// <summary>
        /// Returns true if AdminStreamAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminStreamAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminStreamAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.RoomDescription == other.RoomDescription ||
                    this.RoomDescription != null &&
                    this.RoomDescription.Equals(other.RoomDescription)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.CreatedByUserId == other.CreatedByUserId ||
                    this.CreatedByUserId != null &&
                    this.CreatedByUserId.Equals(other.CreatedByUserId)
                ) && 
                (
                    this.CreatedDate == other.CreatedDate ||
                    this.CreatedDate != null &&
                    this.CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    this.LastModifiedDate == other.LastModifiedDate ||
                    this.LastModifiedDate != null &&
                    this.LastModifiedDate.Equals(other.LastModifiedDate)
                ) && 
                (
                    this.OriginCompany == other.OriginCompany ||
                    this.OriginCompany != null &&
                    this.OriginCompany.Equals(other.OriginCompany)
                ) && 
                (
                    this.OriginCompanyId == other.OriginCompanyId ||
                    this.OriginCompanyId != null &&
                    this.OriginCompanyId.Equals(other.OriginCompanyId)
                ) && 
                (
                    this.MembersCount == other.MembersCount ||
                    this.MembersCount != null &&
                    this.MembersCount.Equals(other.MembersCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.RoomDescription != null)
                    hash = hash * 59 + this.RoomDescription.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.CreatedByUserId != null)
                    hash = hash * 59 + this.CreatedByUserId.GetHashCode();
                if (this.CreatedDate != null)
                    hash = hash * 59 + this.CreatedDate.GetHashCode();
                if (this.LastModifiedDate != null)
                    hash = hash * 59 + this.LastModifiedDate.GetHashCode();
                if (this.OriginCompany != null)
                    hash = hash * 59 + this.OriginCompany.GetHashCode();
                if (this.OriginCompanyId != null)
                    hash = hash * 59 + this.OriginCompanyId.GetHashCode();
                if (this.MembersCount != null)
                    hash = hash * 59 + this.MembersCount.GetHashCode();
                return hash;
            }
        }
    }

}
