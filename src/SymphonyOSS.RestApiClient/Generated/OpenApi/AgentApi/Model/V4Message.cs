// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Agent API
 *
 * This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://developers.symphony.com/documentation/message_format_reference 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Client.SwaggerDateConverter;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Model
{
    /// <summary>
    /// A representation of a message sent by a user of Symphony
    /// </summary>
    [DataContract]
    public partial class V4Message :  IEquatable<V4Message>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V4Message" /> class.
        /// </summary>
        /// <param name="MessageId">Id of the message.</param>
        /// <param name="Timestamp">Timestamp of the message in milliseconds since Jan 1 1970.</param>
        /// <param name="Message">Message content in MessageMLV2.</param>
        /// <param name="Data">Message data in EntityJSON.</param>
        /// <param name="Attachments">Message attachments.</param>
        /// <param name="User">Message author.</param>
        /// <param name="Stream">Message destination.</param>
        /// <param name="ExternalRecipients">Indicates if the message have external recipients.</param>
        public V4Message(string MessageId = default(string), long? Timestamp = default(long?), string Message = default(string), string Data = default(string), List<V4AttachmentInfo> Attachments = default(List<V4AttachmentInfo>), V4User User = default(V4User), V4Stream Stream = default(V4Stream), bool? ExternalRecipients = default(bool?))
        {
            this.MessageId = MessageId;
            this.Timestamp = Timestamp;
            this.Message = Message;
            this.Data = Data;
            this.Attachments = Attachments;
            this.User = User;
            this.Stream = Stream;
            this.ExternalRecipients = ExternalRecipients;
        }
        
        /// <summary>
        /// Id of the message
        /// </summary>
        /// <value>Id of the message</value>
        [DataMember(Name="messageId", EmitDefaultValue=false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Timestamp of the message in milliseconds since Jan 1 1970
        /// </summary>
        /// <value>Timestamp of the message in milliseconds since Jan 1 1970</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Message content in MessageMLV2
        /// </summary>
        /// <value>Message content in MessageMLV2</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Message data in EntityJSON
        /// </summary>
        /// <value>Message data in EntityJSON</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public string Data { get; set; }

        /// <summary>
        /// Message attachments
        /// </summary>
        /// <value>Message attachments</value>
        [DataMember(Name="attachments", EmitDefaultValue=false)]
        public List<V4AttachmentInfo> Attachments { get; set; }

        /// <summary>
        /// Message author
        /// </summary>
        /// <value>Message author</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public V4User User { get; set; }

        /// <summary>
        /// Message destination
        /// </summary>
        /// <value>Message destination</value>
        [DataMember(Name="stream", EmitDefaultValue=false)]
        public V4Stream Stream { get; set; }

        /// <summary>
        /// Indicates if the message have external recipients
        /// </summary>
        /// <value>Indicates if the message have external recipients</value>
        [DataMember(Name="externalRecipients", EmitDefaultValue=false)]
        public bool? ExternalRecipients { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V4Message {\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Stream: ").Append(Stream).Append("\n");
            sb.Append("  ExternalRecipients: ").Append(ExternalRecipients).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V4Message);
        }

        /// <summary>
        /// Returns true if V4Message instances are equal
        /// </summary>
        /// <param name="other">Instance of V4Message to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V4Message other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MessageId == other.MessageId ||
                    this.MessageId != null &&
                    this.MessageId.Equals(other.MessageId)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.Attachments == other.Attachments ||
                    this.Attachments != null &&
                    this.Attachments.SequenceEqual(other.Attachments)
                ) && 
                (
                    this.User == other.User ||
                    this.User != null &&
                    this.User.Equals(other.User)
                ) && 
                (
                    this.Stream == other.Stream ||
                    this.Stream != null &&
                    this.Stream.Equals(other.Stream)
                ) && 
                (
                    this.ExternalRecipients == other.ExternalRecipients ||
                    this.ExternalRecipients != null &&
                    this.ExternalRecipients.Equals(other.ExternalRecipients)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MessageId != null)
                    hash = hash * 59 + this.MessageId.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.Attachments != null)
                    hash = hash * 59 + this.Attachments.GetHashCode();
                if (this.User != null)
                    hash = hash * 59 + this.User.GetHashCode();
                if (this.Stream != null)
                    hash = hash * 59 + this.Stream.GetHashCode();
                if (this.ExternalRecipients != null)
                    hash = hash * 59 + this.ExternalRecipients.GetHashCode();
                return hash;
            }
        }
    }

}
