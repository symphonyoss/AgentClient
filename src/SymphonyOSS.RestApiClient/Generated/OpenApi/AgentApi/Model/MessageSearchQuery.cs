// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Agent API
 *
 * This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://developers.symphony.com/documentation/message_format_reference 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using SwaggerDateConverter = SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Client.SwaggerDateConverter;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Model
{
    /// <summary>
    /// MessageSearchQuery
    /// </summary>
    [DataContract]
    public partial class MessageSearchQuery :  IEquatable<MessageSearchQuery>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MessageSearchQuery" /> class.
        /// </summary>
        /// <param name="Text">Search for messages containing this text. Requires streamId to be specified..</param>
        /// <param name="StreamId">Search for messages sent to this stream.</param>
        /// <param name="StreamType">Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST. .</param>
        /// <param name="Author">Search for messages sent by this user ID.</param>
        /// <param name="Hashtag">Search for messages containing this hashtag.</param>
        /// <param name="Cashtag">Search for messages containing this cashtag.</param>
        /// <param name="Mention">Search for messages mentioning this user ID.</param>
        /// <param name="Signal">Search for messages matching this signal. Can only be combined with date filtering and paging parameters. .</param>
        /// <param name="FromDate">Search for messages sent on or after this timestamp.</param>
        /// <param name="ToDate">Search for messages sent before this timestamp.</param>
        public MessageSearchQuery(string Text = default(string), string StreamId = default(string), string StreamType = default(string), long? Author = default(long?), string Hashtag = default(string), string Cashtag = default(string), long? Mention = default(long?), string Signal = default(string), long? FromDate = default(long?), long? ToDate = default(long?))
        {
            this.Text = Text;
            this.StreamId = StreamId;
            this.StreamType = StreamType;
            this.Author = Author;
            this.Hashtag = Hashtag;
            this.Cashtag = Cashtag;
            this.Mention = Mention;
            this.Signal = Signal;
            this.FromDate = FromDate;
            this.ToDate = ToDate;
        }
        
        /// <summary>
        /// Search for messages containing this text. Requires streamId to be specified.
        /// </summary>
        /// <value>Search for messages containing this text. Requires streamId to be specified.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Search for messages sent to this stream
        /// </summary>
        /// <value>Search for messages sent to this stream</value>
        [DataMember(Name="streamId", EmitDefaultValue=false)]
        public string StreamId { get; set; }

        /// <summary>
        /// Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST. 
        /// </summary>
        /// <value>Search for messages sent to this type of streams. Accepted values are CHAT, IM, MIM, ROOM, POST. </value>
        [DataMember(Name="streamType", EmitDefaultValue=false)]
        public string StreamType { get; set; }

        /// <summary>
        /// Search for messages sent by this user ID
        /// </summary>
        /// <value>Search for messages sent by this user ID</value>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public long? Author { get; set; }

        /// <summary>
        /// Search for messages containing this hashtag
        /// </summary>
        /// <value>Search for messages containing this hashtag</value>
        [DataMember(Name="hashtag", EmitDefaultValue=false)]
        public string Hashtag { get; set; }

        /// <summary>
        /// Search for messages containing this cashtag
        /// </summary>
        /// <value>Search for messages containing this cashtag</value>
        [DataMember(Name="cashtag", EmitDefaultValue=false)]
        public string Cashtag { get; set; }

        /// <summary>
        /// Search for messages mentioning this user ID
        /// </summary>
        /// <value>Search for messages mentioning this user ID</value>
        [DataMember(Name="mention", EmitDefaultValue=false)]
        public long? Mention { get; set; }

        /// <summary>
        /// Search for messages matching this signal. Can only be combined with date filtering and paging parameters. 
        /// </summary>
        /// <value>Search for messages matching this signal. Can only be combined with date filtering and paging parameters. </value>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public string Signal { get; set; }

        /// <summary>
        /// Search for messages sent on or after this timestamp
        /// </summary>
        /// <value>Search for messages sent on or after this timestamp</value>
        [DataMember(Name="fromDate", EmitDefaultValue=false)]
        public long? FromDate { get; set; }

        /// <summary>
        /// Search for messages sent before this timestamp
        /// </summary>
        /// <value>Search for messages sent before this timestamp</value>
        [DataMember(Name="toDate", EmitDefaultValue=false)]
        public long? ToDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MessageSearchQuery {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  StreamType: ").Append(StreamType).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Hashtag: ").Append(Hashtag).Append("\n");
            sb.Append("  Cashtag: ").Append(Cashtag).Append("\n");
            sb.Append("  Mention: ").Append(Mention).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  FromDate: ").Append(FromDate).Append("\n");
            sb.Append("  ToDate: ").Append(ToDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as MessageSearchQuery);
        }

        /// <summary>
        /// Returns true if MessageSearchQuery instances are equal
        /// </summary>
        /// <param name="other">Instance of MessageSearchQuery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MessageSearchQuery other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Text == other.Text ||
                    this.Text != null &&
                    this.Text.Equals(other.Text)
                ) && 
                (
                    this.StreamId == other.StreamId ||
                    this.StreamId != null &&
                    this.StreamId.Equals(other.StreamId)
                ) && 
                (
                    this.StreamType == other.StreamType ||
                    this.StreamType != null &&
                    this.StreamType.Equals(other.StreamType)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.Hashtag == other.Hashtag ||
                    this.Hashtag != null &&
                    this.Hashtag.Equals(other.Hashtag)
                ) && 
                (
                    this.Cashtag == other.Cashtag ||
                    this.Cashtag != null &&
                    this.Cashtag.Equals(other.Cashtag)
                ) && 
                (
                    this.Mention == other.Mention ||
                    this.Mention != null &&
                    this.Mention.Equals(other.Mention)
                ) && 
                (
                    this.Signal == other.Signal ||
                    this.Signal != null &&
                    this.Signal.Equals(other.Signal)
                ) && 
                (
                    this.FromDate == other.FromDate ||
                    this.FromDate != null &&
                    this.FromDate.Equals(other.FromDate)
                ) && 
                (
                    this.ToDate == other.ToDate ||
                    this.ToDate != null &&
                    this.ToDate.Equals(other.ToDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Text != null)
                    hash = hash * 59 + this.Text.GetHashCode();
                if (this.StreamId != null)
                    hash = hash * 59 + this.StreamId.GetHashCode();
                if (this.StreamType != null)
                    hash = hash * 59 + this.StreamType.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.Hashtag != null)
                    hash = hash * 59 + this.Hashtag.GetHashCode();
                if (this.Cashtag != null)
                    hash = hash * 59 + this.Cashtag.GetHashCode();
                if (this.Mention != null)
                    hash = hash * 59 + this.Mention.GetHashCode();
                if (this.Signal != null)
                    hash = hash * 59 + this.Signal.GetHashCode();
                if (this.FromDate != null)
                    hash = hash * 59 + this.FromDate.GetHashCode();
                if (this.ToDate != null)
                    hash = hash * 59 + this.ToDate.GetHashCode();
                return hash;
            }
        }
    }

}
