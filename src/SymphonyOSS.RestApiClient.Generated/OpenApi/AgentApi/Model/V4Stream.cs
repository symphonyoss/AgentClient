// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Agent API
 *
 * This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://developers.symphony.com/documentation/message_format_reference 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Model
{
    /// <summary>
    /// V4Stream
    /// </summary>
    [DataContract]
    public partial class V4Stream :  IEquatable<V4Stream>, IValidatableObject
    {
        /// <summary>
        /// Type of stream - IM, MIM, ROOM, POST
        /// </summary>
        /// <value>Type of stream - IM, MIM, ROOM, POST</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StreamTypeEnum
        {
            
            /// <summary>
            /// Enum IM for "IM"
            /// </summary>
            [EnumMember(Value = "IM")]
            IM,
            
            /// <summary>
            /// Enum MIM for "MIM"
            /// </summary>
            [EnumMember(Value = "MIM")]
            MIM,
            
            /// <summary>
            /// Enum ROOM for "ROOM"
            /// </summary>
            [EnumMember(Value = "ROOM")]
            ROOM,
            
            /// <summary>
            /// Enum POST for "POST"
            /// </summary>
            [EnumMember(Value = "POST")]
            POST
        }

        /// <summary>
        /// Type of stream - IM, MIM, ROOM, POST
        /// </summary>
        /// <value>Type of stream - IM, MIM, ROOM, POST</value>
        [DataMember(Name="streamType", EmitDefaultValue=false)]
        public StreamTypeEnum? StreamType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V4Stream" /> class.
        /// </summary>
        /// <param name="StreamId">Id of stream.</param>
        /// <param name="StreamType">Type of stream - IM, MIM, ROOM, POST.</param>
        /// <param name="RoomName">Applicable only to rooms.</param>
        /// <param name="Members">Applicable only to IM Created.</param>
        /// <param name="External">External.</param>
        public V4Stream(string StreamId = default(string), StreamTypeEnum? StreamType = default(StreamTypeEnum?), string RoomName = default(string), List<V4User> Members = default(List<V4User>), bool? External = default(bool?))
        {
            this.StreamId = StreamId;
            this.StreamType = StreamType;
            this.RoomName = RoomName;
            this.Members = Members;
            this.External = External;
        }
        
        /// <summary>
        /// Id of stream
        /// </summary>
        /// <value>Id of stream</value>
        [DataMember(Name="streamId", EmitDefaultValue=false)]
        public string StreamId { get; set; }
        /// <summary>
        /// Applicable only to rooms
        /// </summary>
        /// <value>Applicable only to rooms</value>
        [DataMember(Name="roomName", EmitDefaultValue=false)]
        public string RoomName { get; set; }
        /// <summary>
        /// Applicable only to IM Created
        /// </summary>
        /// <value>Applicable only to IM Created</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<V4User> Members { get; set; }
        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public bool? External { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V4Stream {\n");
            sb.Append("  StreamId: ").Append(StreamId).Append("\n");
            sb.Append("  StreamType: ").Append(StreamType).Append("\n");
            sb.Append("  RoomName: ").Append(RoomName).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V4Stream);
        }

        /// <summary>
        /// Returns true if V4Stream instances are equal
        /// </summary>
        /// <param name="other">Instance of V4Stream to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V4Stream other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StreamId == other.StreamId ||
                    this.StreamId != null &&
                    this.StreamId.Equals(other.StreamId)
                ) && 
                (
                    this.StreamType == other.StreamType ||
                    this.StreamType != null &&
                    this.StreamType.Equals(other.StreamType)
                ) && 
                (
                    this.RoomName == other.RoomName ||
                    this.RoomName != null &&
                    this.RoomName.Equals(other.RoomName)
                ) && 
                (
                    this.Members == other.Members ||
                    this.Members != null &&
                    this.Members.SequenceEqual(other.Members)
                ) && 
                (
                    this.External == other.External ||
                    this.External != null &&
                    this.External.Equals(other.External)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StreamId != null)
                    hash = hash * 59 + this.StreamId.GetHashCode();
                if (this.StreamType != null)
                    hash = hash * 59 + this.StreamType.GetHashCode();
                if (this.RoomName != null)
                    hash = hash * 59 + this.RoomName.GetHashCode();
                if (this.Members != null)
                    hash = hash * 59 + this.Members.GetHashCode();
                if (this.External != null)
                    hash = hash * 59 + this.External.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
