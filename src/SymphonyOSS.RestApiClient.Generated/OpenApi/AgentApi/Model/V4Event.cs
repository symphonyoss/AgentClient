// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Agent API
 *
 * This document refers to Symphony API calls to send and receive messages and content. They need the on-premise Agent installed to perform decryption/encryption of content.  - sessionToken and keyManagerToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have sent no message to any stream even if a request to aome subset of the requested streams would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. - MessageML is a markup language for messages. See reference here: https://developers.symphony.com/documentation/message_format_reference 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.AgentApi.Model
{
    /// <summary>
    /// V4Event
    /// </summary>
    [DataContract]
    public partial class V4Event :  IEquatable<V4Event>, IValidatableObject
    {
        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum MESSAGESENT for "MESSAGESENT"
            /// </summary>
            [EnumMember(Value = "MESSAGESENT")]
            MESSAGESENT,
            
            /// <summary>
            /// Enum SHAREDPOST for "SHAREDPOST"
            /// </summary>
            [EnumMember(Value = "SHAREDPOST")]
            SHAREDPOST,
            
            /// <summary>
            /// Enum INSTANTMESSAGECREATED for "INSTANTMESSAGECREATED"
            /// </summary>
            [EnumMember(Value = "INSTANTMESSAGECREATED")]
            INSTANTMESSAGECREATED,
            
            /// <summary>
            /// Enum ROOMCREATED for "ROOMCREATED"
            /// </summary>
            [EnumMember(Value = "ROOMCREATED")]
            ROOMCREATED,
            
            /// <summary>
            /// Enum ROOMUPDATED for "ROOMUPDATED"
            /// </summary>
            [EnumMember(Value = "ROOMUPDATED")]
            ROOMUPDATED,
            
            /// <summary>
            /// Enum ROOMDEACTIVATED for "ROOMDEACTIVATED"
            /// </summary>
            [EnumMember(Value = "ROOMDEACTIVATED")]
            ROOMDEACTIVATED,
            
            /// <summary>
            /// Enum ROOMREACTIVATED for "ROOMREACTIVATED"
            /// </summary>
            [EnumMember(Value = "ROOMREACTIVATED")]
            ROOMREACTIVATED,
            
            /// <summary>
            /// Enum USERJOINEDROOM for "USERJOINEDROOM"
            /// </summary>
            [EnumMember(Value = "USERJOINEDROOM")]
            USERJOINEDROOM,
            
            /// <summary>
            /// Enum USERLEFTROOM for "USERLEFTROOM"
            /// </summary>
            [EnumMember(Value = "USERLEFTROOM")]
            USERLEFTROOM,
            
            /// <summary>
            /// Enum ROOMMEMBERPROMOTEDTOOWNER for "ROOMMEMBERPROMOTEDTOOWNER"
            /// </summary>
            [EnumMember(Value = "ROOMMEMBERPROMOTEDTOOWNER")]
            ROOMMEMBERPROMOTEDTOOWNER,
            
            /// <summary>
            /// Enum ROOMMEMBERDEMOTEDFROMOWNER for "ROOMMEMBERDEMOTEDFROMOWNER"
            /// </summary>
            [EnumMember(Value = "ROOMMEMBERDEMOTEDFROMOWNER")]
            ROOMMEMBERDEMOTEDFROMOWNER,
            
            /// <summary>
            /// Enum CONNECTIONREQUESTED for "CONNECTIONREQUESTED"
            /// </summary>
            [EnumMember(Value = "CONNECTIONREQUESTED")]
            CONNECTIONREQUESTED,
            
            /// <summary>
            /// Enum CONNECTIONACCEPTED for "CONNECTIONACCEPTED"
            /// </summary>
            [EnumMember(Value = "CONNECTIONACCEPTED")]
            CONNECTIONACCEPTED,
            
            /// <summary>
            /// Enum MESSAGESUPPRESSED for "MESSAGESUPPRESSED"
            /// </summary>
            [EnumMember(Value = "MESSAGESUPPRESSED")]
            MESSAGESUPPRESSED
        }

        /// <summary>
        /// Type of event
        /// </summary>
        /// <value>Type of event</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public TypeEnum? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="V4Event" /> class.
        /// </summary>
        /// <param name="Id">Event ID.</param>
        /// <param name="Timestamp">Timestamp of event.</param>
        /// <param name="Type">Type of event.</param>
        /// <param name="Initiator">Actor who initiated the event.</param>
        /// <param name="Payload">Holds payload for all event types.</param>
        public V4Event(string Id = default(string), long? Timestamp = default(long?), TypeEnum? Type = default(TypeEnum?), V4Initiator Initiator = default(V4Initiator), V4Payload Payload = default(V4Payload))
        {
            this.Id = Id;
            this.Timestamp = Timestamp;
            this.Type = Type;
            this.Initiator = Initiator;
            this.Payload = Payload;
        }
        
        /// <summary>
        /// Event ID
        /// </summary>
        /// <value>Event ID</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Timestamp of event
        /// </summary>
        /// <value>Timestamp of event</value>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public long? Timestamp { get; set; }
        /// <summary>
        /// Actor who initiated the event
        /// </summary>
        /// <value>Actor who initiated the event</value>
        [DataMember(Name="initiator", EmitDefaultValue=false)]
        public V4Initiator Initiator { get; set; }
        /// <summary>
        /// Holds payload for all event types
        /// </summary>
        /// <value>Holds payload for all event types</value>
        [DataMember(Name="payload", EmitDefaultValue=false)]
        public V4Payload Payload { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V4Event {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Initiator: ").Append(Initiator).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V4Event);
        }

        /// <summary>
        /// Returns true if V4Event instances are equal
        /// </summary>
        /// <param name="other">Instance of V4Event to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V4Event other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Initiator == other.Initiator ||
                    this.Initiator != null &&
                    this.Initiator.Equals(other.Initiator)
                ) && 
                (
                    this.Payload == other.Payload ||
                    this.Payload != null &&
                    this.Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Initiator != null)
                    hash = hash * 59 + this.Initiator.GetHashCode();
                if (this.Payload != null)
                    hash = hash * 59 + this.Payload.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
