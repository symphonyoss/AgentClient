// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model
{
    /// <summary>
    /// Stream information
    /// </summary>
    [DataContract]
    public partial class AdminStreamInfo :  IEquatable<AdminStreamInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminStreamInfo" /> class.
        /// </summary>
        /// <param name="Id">stream id.</param>
        /// <param name="IsExternal">true indicate this stream has the scope of external and false indictate this stream has the scope of internal.</param>
        /// <param name="IsActive">true indicate that this stream has the status of active and false indicate this stream has the scope of inactive.</param>
        /// <param name="IsPublic">true indicate that this stream has a privacy setting of public.  This only apply a ROOM stream type..</param>
        /// <param name="Type">type of stream (IM, MIM, ROOM).</param>
        /// <param name="Attributes">additional optional properties of the stream.</param>
        public AdminStreamInfo(string Id = default(string), bool? IsExternal = default(bool?), bool? IsActive = default(bool?), bool? IsPublic = default(bool?), string Type = default(string), AdminStreamAttributes Attributes = default(AdminStreamAttributes))
        {
            this.Id = Id;
            this.IsExternal = IsExternal;
            this.IsActive = IsActive;
            this.IsPublic = IsPublic;
            this.Type = Type;
            this.Attributes = Attributes;
        }
        
        /// <summary>
        /// stream id
        /// </summary>
        /// <value>stream id</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// true indicate this stream has the scope of external and false indictate this stream has the scope of internal
        /// </summary>
        /// <value>true indicate this stream has the scope of external and false indictate this stream has the scope of internal</value>
        [DataMember(Name="isExternal", EmitDefaultValue=false)]
        public bool? IsExternal { get; set; }
        /// <summary>
        /// true indicate that this stream has the status of active and false indicate this stream has the scope of inactive
        /// </summary>
        /// <value>true indicate that this stream has the status of active and false indicate this stream has the scope of inactive</value>
        [DataMember(Name="isActive", EmitDefaultValue=false)]
        public bool? IsActive { get; set; }
        /// <summary>
        /// true indicate that this stream has a privacy setting of public.  This only apply a ROOM stream type.
        /// </summary>
        /// <value>true indicate that this stream has a privacy setting of public.  This only apply a ROOM stream type.</value>
        [DataMember(Name="isPublic", EmitDefaultValue=false)]
        public bool? IsPublic { get; set; }
        /// <summary>
        /// type of stream (IM, MIM, ROOM)
        /// </summary>
        /// <value>type of stream (IM, MIM, ROOM)</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// additional optional properties of the stream
        /// </summary>
        /// <value>additional optional properties of the stream</value>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public AdminStreamAttributes Attributes { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminStreamInfo {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsExternal: ").Append(IsExternal).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsPublic: ").Append(IsPublic).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminStreamInfo);
        }

        /// <summary>
        /// Returns true if AdminStreamInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminStreamInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminStreamInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.IsExternal == other.IsExternal ||
                    this.IsExternal != null &&
                    this.IsExternal.Equals(other.IsExternal)
                ) && 
                (
                    this.IsActive == other.IsActive ||
                    this.IsActive != null &&
                    this.IsActive.Equals(other.IsActive)
                ) && 
                (
                    this.IsPublic == other.IsPublic ||
                    this.IsPublic != null &&
                    this.IsPublic.Equals(other.IsPublic)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.Attributes == other.Attributes ||
                    this.Attributes != null &&
                    this.Attributes.Equals(other.Attributes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.IsExternal != null)
                    hash = hash * 59 + this.IsExternal.GetHashCode();
                if (this.IsActive != null)
                    hash = hash * 59 + this.IsActive.GetHashCode();
                if (this.IsPublic != null)
                    hash = hash * 59 + this.IsPublic.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.Attributes != null)
                    hash = hash * 59 + this.Attributes.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
