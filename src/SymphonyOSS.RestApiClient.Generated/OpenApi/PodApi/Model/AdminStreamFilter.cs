// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model
{
    /// <summary>
    /// stream filter criteria
    /// </summary>
    [DataContract]
    public partial class AdminStreamFilter :  IEquatable<AdminStreamFilter>, IValidatableObject
    {
        /// <summary>
        /// scope of the room.  If not specified, it will include both Internal and External scope
        /// </summary>
        /// <value>scope of the room.  If not specified, it will include both Internal and External scope</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ScopeEnum
        {
            
            /// <summary>
            /// Enum INTERNAL for "INTERNAL"
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL,
            
            /// <summary>
            /// Enum EXTERNAL for "EXTERNAL"
            /// </summary>
            [EnumMember(Value = "EXTERNAL")]
            EXTERNAL
        }

        /// <summary>
        /// Origin of the room. It indicate whether the room was created by a user within the company by another company.  If not specified, it will include both Internal and External origin 
        /// </summary>
        /// <value>Origin of the room. It indicate whether the room was created by a user within the company by another company.  If not specified, it will include both Internal and External origin </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OriginEnum
        {
            
            /// <summary>
            /// Enum INTERNAL for "INTERNAL"
            /// </summary>
            [EnumMember(Value = "INTERNAL")]
            INTERNAL,
            
            /// <summary>
            /// Enum EXTERNAL for "EXTERNAL"
            /// </summary>
            [EnumMember(Value = "EXTERNAL")]
            EXTERNAL
        }

        /// <summary>
        /// Status of the room. If not specified, it will include both Active and Inactive status
        /// </summary>
        /// <value>Status of the room. If not specified, it will include both Active and Inactive status</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ACTIVE for "ACTIVE"
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE,
            
            /// <summary>
            /// Enum INACTIVE for "INACTIVE"
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE
        }

        /// <summary>
        /// Privacy setting of the stream.  If not specified, it will include both public and private stream
        /// </summary>
        /// <value>Privacy setting of the stream.  If not specified, it will include both public and private stream</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PrivacyEnum
        {
            
            /// <summary>
            /// Enum PUBLIC for "PUBLIC"
            /// </summary>
            [EnumMember(Value = "PUBLIC")]
            PUBLIC,
            
            /// <summary>
            /// Enum PRIVATE for "PRIVATE"
            /// </summary>
            [EnumMember(Value = "PRIVATE")]
            PRIVATE
        }

        /// <summary>
        /// scope of the room.  If not specified, it will include both Internal and External scope
        /// </summary>
        /// <value>scope of the room.  If not specified, it will include both Internal and External scope</value>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ScopeEnum? Scope { get; set; }
        /// <summary>
        /// Origin of the room. It indicate whether the room was created by a user within the company by another company.  If not specified, it will include both Internal and External origin 
        /// </summary>
        /// <value>Origin of the room. It indicate whether the room was created by a user within the company by another company.  If not specified, it will include both Internal and External origin </value>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public OriginEnum? Origin { get; set; }
        /// <summary>
        /// Status of the room. If not specified, it will include both Active and Inactive status
        /// </summary>
        /// <value>Status of the room. If not specified, it will include both Active and Inactive status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum? Status { get; set; }
        /// <summary>
        /// Privacy setting of the stream.  If not specified, it will include both public and private stream
        /// </summary>
        /// <value>Privacy setting of the stream.  If not specified, it will include both public and private stream</value>
        [DataMember(Name="privacy", EmitDefaultValue=false)]
        public PrivacyEnum? Privacy { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AdminStreamFilter" /> class.
        /// </summary>
        /// <param name="StreamTypes">type of streams to search for.</param>
        /// <param name="Scope">scope of the room.  If not specified, it will include both Internal and External scope.</param>
        /// <param name="Origin">Origin of the room. It indicate whether the room was created by a user within the company by another company.  If not specified, it will include both Internal and External origin .</param>
        /// <param name="Status">Status of the room. If not specified, it will include both Active and Inactive status.</param>
        /// <param name="Privacy">Privacy setting of the stream.  If not specified, it will include both public and private stream.</param>
        /// <param name="StartDate">Start date in unix timestamp in millseconds.</param>
        /// <param name="EndDate">End date in unix timestamp in millseconds.  If not specified, it assume to be current time..</param>
        public AdminStreamFilter(List<AdminStreamTypeEnum> StreamTypes = default(List<AdminStreamTypeEnum>), ScopeEnum? Scope = default(ScopeEnum?), OriginEnum? Origin = default(OriginEnum?), StatusEnum? Status = default(StatusEnum?), PrivacyEnum? Privacy = default(PrivacyEnum?), long? StartDate = default(long?), long? EndDate = default(long?))
        {
            this.StreamTypes = StreamTypes;
            this.Scope = Scope;
            this.Origin = Origin;
            this.Status = Status;
            this.Privacy = Privacy;
            this.StartDate = StartDate;
            this.EndDate = EndDate;
        }
        
        /// <summary>
        /// type of streams to search for
        /// </summary>
        /// <value>type of streams to search for</value>
        [DataMember(Name="streamTypes", EmitDefaultValue=false)]
        public List<AdminStreamTypeEnum> StreamTypes { get; set; }
        /// <summary>
        /// Start date in unix timestamp in millseconds
        /// </summary>
        /// <value>Start date in unix timestamp in millseconds</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public long? StartDate { get; set; }
        /// <summary>
        /// End date in unix timestamp in millseconds.  If not specified, it assume to be current time.
        /// </summary>
        /// <value>End date in unix timestamp in millseconds.  If not specified, it assume to be current time.</value>
        [DataMember(Name="endDate", EmitDefaultValue=false)]
        public long? EndDate { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdminStreamFilter {\n");
            sb.Append("  StreamTypes: ").Append(StreamTypes).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Privacy: ").Append(Privacy).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as AdminStreamFilter);
        }

        /// <summary>
        /// Returns true if AdminStreamFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of AdminStreamFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdminStreamFilter other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.StreamTypes == other.StreamTypes ||
                    this.StreamTypes != null &&
                    this.StreamTypes.SequenceEqual(other.StreamTypes)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                ) && 
                (
                    this.Origin == other.Origin ||
                    this.Origin != null &&
                    this.Origin.Equals(other.Origin)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Privacy == other.Privacy ||
                    this.Privacy != null &&
                    this.Privacy.Equals(other.Privacy)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.EndDate == other.EndDate ||
                    this.EndDate != null &&
                    this.EndDate.Equals(other.EndDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.StreamTypes != null)
                    hash = hash * 59 + this.StreamTypes.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                if (this.Origin != null)
                    hash = hash * 59 + this.Origin.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Privacy != null)
                    hash = hash * 59 + this.Privacy.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.EndDate != null)
                    hash = hash * 59 + this.EndDate.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
