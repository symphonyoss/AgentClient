// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model
{
    /// <summary>
    /// The results of list based bulk action. The list contains the result messages in the same order as submitted. The message will be an empty string if the action was successful for item in that index. 
    /// </summary>
    [DataContract]
    public partial class BulkActionResult :  IEquatable<BulkActionResult>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets OverallResult
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OverallResultEnum
        {
            
            /// <summary>
            /// Enum SUCCESS for "SUCCESS"
            /// </summary>
            [EnumMember(Value = "SUCCESS")]
            SUCCESS,
            
            /// <summary>
            /// Enum FAIL for "FAIL"
            /// </summary>
            [EnumMember(Value = "FAIL")]
            FAIL
        }

        /// <summary>
        /// Gets or Sets OverallResult
        /// </summary>
        [DataMember(Name="overallResult", EmitDefaultValue=false)]
        public OverallResultEnum? OverallResult { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActionResult" /> class.
        /// </summary>
        /// <param name="OverallResult">OverallResult.</param>
        /// <param name="Results">Results.</param>
        public BulkActionResult(OverallResultEnum? OverallResult = default(OverallResultEnum?), List<string> Results = default(List<string>))
        {
            this.OverallResult = OverallResult;
            this.Results = Results;
        }
        
        /// <summary>
        /// Gets or Sets Results
        /// </summary>
        [DataMember(Name="results", EmitDefaultValue=false)]
        public List<string> Results { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BulkActionResult {\n");
            sb.Append("  OverallResult: ").Append(OverallResult).Append("\n");
            sb.Append("  Results: ").Append(Results).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BulkActionResult);
        }

        /// <summary>
        /// Returns true if BulkActionResult instances are equal
        /// </summary>
        /// <param name="other">Instance of BulkActionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BulkActionResult other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OverallResult == other.OverallResult ||
                    this.OverallResult != null &&
                    this.OverallResult.Equals(other.OverallResult)
                ) && 
                (
                    this.Results == other.Results ||
                    this.Results != null &&
                    this.Results.SequenceEqual(other.Results)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OverallResult != null)
                    hash = hash * 59 + this.OverallResult.GetHashCode();
                if (this.Results != null)
                    hash = hash * 59 + this.Results.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
