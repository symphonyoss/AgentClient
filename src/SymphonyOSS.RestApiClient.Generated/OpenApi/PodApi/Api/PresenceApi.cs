// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client;
using SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPresenceApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get presence information about all company (pod) users.
        /// </summary>
        /// <remarks>
        /// The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>PresenceList</returns>
        PresenceList V1PresenceGet (string sessionToken);

        /// <summary>
        /// Get presence information about all company (pod) users.
        /// </summary>
        /// <remarks>
        /// The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of PresenceList</returns>
        ApiResponse<PresenceList> V1PresenceGetWithHttpInfo (string sessionToken);
        /// <summary>
        /// Get presence information about the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Presence</returns>
        Presence V1UserPresenceGet (string sessionToken);

        /// <summary>
        /// Get presence information about the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of Presence</returns>
        ApiResponse<Presence> V1UserPresenceGetWithHttpInfo (string sessionToken);
        /// <summary>
        /// Set the presence of the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Presence</returns>
        Presence V1UserPresencePost (string sessionToken, Presence presence);

        /// <summary>
        /// Set the presence of the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>ApiResponse of Presence</returns>
        ApiResponse<Presence> V1UserPresencePostWithHttpInfo (string sessionToken, Presence presence);
        /// <summary>
        /// Register interest in a user&#39;s presence status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1UserPresenceRegisterPost (string sessionToken, UserIdList uidList);

        /// <summary>
        /// Register interest in a user&#39;s presence status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1UserPresenceRegisterPostWithHttpInfo (string sessionToken, UserIdList uidList);
        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Presence</returns>
        Presence V1UserUidPresenceGet (long? uid, string sessionToken);

        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of Presence</returns>
        ApiResponse<Presence> V1UserUidPresenceGetWithHttpInfo (long? uid, string sessionToken);
        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user.
        /// </summary>
        /// <remarks>
        /// Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Presence</returns>
        Presence V1UserUidPresencePost (long? uid, string sessionToken, Presence presence);

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user.
        /// </summary>
        /// <remarks>
        /// Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>ApiResponse of Presence</returns>
        ApiResponse<Presence> V1UserUidPresencePostWithHttpInfo (long? uid, string sessionToken, Presence presence);
        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Presence</returns>
        Presence V2UserUidPresenceGet (long? uid, string sessionToken, bool? local = null);

        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>ApiResponse of Presence</returns>
        ApiResponse<Presence> V2UserUidPresenceGetWithHttpInfo (long? uid, string sessionToken, bool? local = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get presence information about all company (pod) users.
        /// </summary>
        /// <remarks>
        /// The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of PresenceList</returns>
        System.Threading.Tasks.Task<PresenceList> V1PresenceGetAsync (string sessionToken);

        /// <summary>
        /// Get presence information about all company (pod) users.
        /// </summary>
        /// <remarks>
        /// The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (PresenceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PresenceList>> V1PresenceGetAsyncWithHttpInfo (string sessionToken);
        /// <summary>
        /// Get presence information about the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of Presence</returns>
        System.Threading.Tasks.Task<Presence> V1UserPresenceGetAsync (string sessionToken);

        /// <summary>
        /// Get presence information about the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserPresenceGetAsyncWithHttpInfo (string sessionToken);
        /// <summary>
        /// Set the presence of the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of Presence</returns>
        System.Threading.Tasks.Task<Presence> V1UserPresencePostAsync (string sessionToken, Presence presence);

        /// <summary>
        /// Set the presence of the requesting user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserPresencePostAsyncWithHttpInfo (string sessionToken, Presence presence);
        /// <summary>
        /// Register interest in a user&#39;s presence status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1UserPresenceRegisterPostAsync (string sessionToken, UserIdList uidList);

        /// <summary>
        /// Register interest in a user&#39;s presence status
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1UserPresenceRegisterPostAsyncWithHttpInfo (string sessionToken, UserIdList uidList);
        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of Presence</returns>
        System.Threading.Tasks.Task<Presence> V1UserUidPresenceGetAsync (long? uid, string sessionToken);

        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserUidPresenceGetAsyncWithHttpInfo (long? uid, string sessionToken);
        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user.
        /// </summary>
        /// <remarks>
        /// Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of Presence</returns>
        System.Threading.Tasks.Task<Presence> V1UserUidPresencePostAsync (long? uid, string sessionToken, Presence presence);

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user.
        /// </summary>
        /// <remarks>
        /// Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserUidPresencePostAsyncWithHttpInfo (long? uid, string sessionToken, Presence presence);
        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Task of Presence</returns>
        System.Threading.Tasks.Task<Presence> V2UserUidPresenceGetAsync (long? uid, string sessionToken, bool? local = null);

        /// <summary>
        /// Get presence information about a particular user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        System.Threading.Tasks.Task<ApiResponse<Presence>> V2UserUidPresenceGetAsyncWithHttpInfo (long? uid, string sessionToken, bool? local = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PresenceApi : IPresenceApi
    {
        private SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PresenceApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PresenceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PresenceApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get presence information about all company (pod) users. The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>PresenceList</returns>
        public PresenceList V1PresenceGet (string sessionToken)
        {
             ApiResponse<PresenceList> localVarResponse = V1PresenceGetWithHttpInfo(sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get presence information about all company (pod) users. The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of PresenceList</returns>
        public ApiResponse< PresenceList > V1PresenceGetWithHttpInfo (string sessionToken)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1PresenceGet");

            var localVarPath = "/v1/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PresenceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PresenceList)));
            
        }

        /// <summary>
        /// Get presence information about all company (pod) users. The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of PresenceList</returns>
        public async System.Threading.Tasks.Task<PresenceList> V1PresenceGetAsync (string sessionToken)
        {
             ApiResponse<PresenceList> localVarResponse = await V1PresenceGetAsyncWithHttpInfo(sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get presence information about all company (pod) users. The returned data is taken from the in-memory cache for performance reasons which means inactive users may be omitted from the response.  All non-inactive users WILL be returned and some inactive users MAY be included. Any omitted user IS inactive. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (PresenceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PresenceList>> V1PresenceGetAsyncWithHttpInfo (string sessionToken)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1PresenceGet");

            var localVarPath = "/v1/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1PresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PresenceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PresenceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(PresenceList)));
            
        }

        /// <summary>
        /// Get presence information about the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Presence</returns>
        public Presence V1UserPresenceGet (string sessionToken)
        {
             ApiResponse<Presence> localVarResponse = V1UserPresenceGetWithHttpInfo(sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get presence information about the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of Presence</returns>
        public ApiResponse< Presence > V1UserPresenceGetWithHttpInfo (string sessionToken)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresenceGet");

            var localVarPath = "/v1/user/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Get presence information about the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of Presence</returns>
        public async System.Threading.Tasks.Task<Presence> V1UserPresenceGetAsync (string sessionToken)
        {
             ApiResponse<Presence> localVarResponse = await V1UserPresenceGetAsyncWithHttpInfo(sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get presence information about the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserPresenceGetAsyncWithHttpInfo (string sessionToken)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresenceGet");

            var localVarPath = "/v1/user/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Set the presence of the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Presence</returns>
        public Presence V1UserPresencePost (string sessionToken, Presence presence)
        {
             ApiResponse<Presence> localVarResponse = V1UserPresencePostWithHttpInfo(sessionToken, presence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set the presence of the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>ApiResponse of Presence</returns>
        public ApiResponse< Presence > V1UserPresencePostWithHttpInfo (string sessionToken, Presence presence)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresencePost");
            // verify the required parameter 'presence' is set
            if (presence == null)
                throw new ApiException(400, "Missing required parameter 'presence' when calling PresenceApi->V1UserPresencePost");

            var localVarPath = "/v1/user/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (presence != null && presence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(presence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presence; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresencePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Set the presence of the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of Presence</returns>
        public async System.Threading.Tasks.Task<Presence> V1UserPresencePostAsync (string sessionToken, Presence presence)
        {
             ApiResponse<Presence> localVarResponse = await V1UserPresencePostAsyncWithHttpInfo(sessionToken, presence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set the presence of the requesting user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserPresencePostAsyncWithHttpInfo (string sessionToken, Presence presence)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresencePost");
            // verify the required parameter 'presence' is set
            if (presence == null)
                throw new ApiException(400, "Missing required parameter 'presence' when calling PresenceApi->V1UserPresencePost");

            var localVarPath = "/v1/user/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (presence != null && presence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(presence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presence; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresencePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Register interest in a user&#39;s presence status 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1UserPresenceRegisterPost (string sessionToken, UserIdList uidList)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1UserPresenceRegisterPostWithHttpInfo(sessionToken, uidList);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register interest in a user&#39;s presence status 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1UserPresenceRegisterPostWithHttpInfo (string sessionToken, UserIdList uidList)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresenceRegisterPost");
            // verify the required parameter 'uidList' is set
            if (uidList == null)
                throw new ApiException(400, "Missing required parameter 'uidList' when calling PresenceApi->V1UserPresenceRegisterPost");

            var localVarPath = "/v1/user/presence/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (uidList != null && uidList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uidList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uidList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresenceRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Register interest in a user&#39;s presence status 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1UserPresenceRegisterPostAsync (string sessionToken, UserIdList uidList)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1UserPresenceRegisterPostAsyncWithHttpInfo(sessionToken, uidList);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register interest in a user&#39;s presence status 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="uidList">List of (integer) User IDs of users whose presence to query</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1UserPresenceRegisterPostAsyncWithHttpInfo (string sessionToken, UserIdList uidList)
        {
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserPresenceRegisterPost");
            // verify the required parameter 'uidList' is set
            if (uidList == null)
                throw new ApiException(400, "Missing required parameter 'uidList' when calling PresenceApi->V1UserPresenceRegisterPost");

            var localVarPath = "/v1/user/presence/register";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (uidList != null && uidList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(uidList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = uidList; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserPresenceRegisterPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Presence</returns>
        public Presence V1UserUidPresenceGet (long? uid, string sessionToken)
        {
             ApiResponse<Presence> localVarResponse = V1UserUidPresenceGetWithHttpInfo(uid, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of Presence</returns>
        public ApiResponse< Presence > V1UserUidPresenceGetWithHttpInfo (long? uid, string sessionToken)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V1UserUidPresenceGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserUidPresenceGet");

            var localVarPath = "/v1/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUidPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of Presence</returns>
        public async System.Threading.Tasks.Task<Presence> V1UserUidPresenceGetAsync (long? uid, string sessionToken)
        {
             ApiResponse<Presence> localVarResponse = await V1UserUidPresenceGetAsyncWithHttpInfo(uid, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserUidPresenceGetAsyncWithHttpInfo (long? uid, string sessionToken)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V1UserUidPresenceGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserUidPresenceGet");

            var localVarPath = "/v1/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUidPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user. Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Presence</returns>
        public Presence V1UserUidPresencePost (long? uid, string sessionToken, Presence presence)
        {
             ApiResponse<Presence> localVarResponse = V1UserUidPresencePostWithHttpInfo(uid, sessionToken, presence);
             return localVarResponse.Data;
        }

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user. Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>ApiResponse of Presence</returns>
        public ApiResponse< Presence > V1UserUidPresencePostWithHttpInfo (long? uid, string sessionToken, Presence presence)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V1UserUidPresencePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserUidPresencePost");
            // verify the required parameter 'presence' is set
            if (presence == null)
                throw new ApiException(400, "Missing required parameter 'presence' when calling PresenceApi->V1UserUidPresencePost");

            var localVarPath = "/v1/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (presence != null && presence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(presence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presence; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUidPresencePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user. Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of Presence</returns>
        public async System.Threading.Tasks.Task<Presence> V1UserUidPresencePostAsync (long? uid, string sessionToken, Presence presence)
        {
             ApiResponse<Presence> localVarResponse = await V1UserUidPresencePostAsyncWithHttpInfo(uid, sessionToken, presence);
             return localVarResponse.Data;

        }

        /// <summary>
        /// LIMITED RELEASE Set presence information for a particular user. Only the following states can be set AVAILABLE BUSY ON_THE_PHONE AWAY  Attempts to set other states will result in a 403 FORBIDDEN response.  The UNDEFINED value is an error case used to represent the case if the value stored in the system cannot be represented by the values known to the API.  The other states are reserved for future use. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="presence"></param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Presence>> V1UserUidPresencePostAsyncWithHttpInfo (long? uid, string sessionToken, Presence presence)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V1UserUidPresencePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V1UserUidPresencePost");
            // verify the required parameter 'presence' is set
            if (presence == null)
                throw new ApiException(400, "Missing required parameter 'presence' when calling PresenceApi->V1UserUidPresencePost");

            var localVarPath = "/v1/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (presence != null && presence.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(presence); // http body (model) parameter
            }
            else
            {
                localVarPostBody = presence; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1UserUidPresencePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Presence</returns>
        public Presence V2UserUidPresenceGet (long? uid, string sessionToken, bool? local = null)
        {
             ApiResponse<Presence> localVarResponse = V2UserUidPresenceGetWithHttpInfo(uid, sessionToken, local);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>ApiResponse of Presence</returns>
        public ApiResponse< Presence > V2UserUidPresenceGetWithHttpInfo (long? uid, string sessionToken, bool? local = null)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V2UserUidPresenceGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V2UserUidPresenceGet");

            var localVarPath = "/v2/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (local != null) localVarQueryParams.Add("local", Configuration.ApiClient.ParameterToString(local)); // query parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2UserUidPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Task of Presence</returns>
        public async System.Threading.Tasks.Task<Presence> V2UserUidPresenceGetAsync (long? uid, string sessionToken, bool? local = null)
        {
             ApiResponse<Presence> localVarResponse = await V2UserUidPresenceGetAsyncWithHttpInfo(uid, sessionToken, local);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get presence information about a particular user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="uid">User ID as a decimal integer </param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="local">If true, a local query will be performed and the presence will be set to OFFLINE for users who are not local to the calling user&#39;s pod. If false or absent, then the presence of all local users and the presence of all external users to whom the calling user is connected will be queried.  For external users, a \&quot;presence interest\&quot; should be registered through /v1/user/presence/register before querying for presence.  (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Presence)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Presence>> V2UserUidPresenceGetAsyncWithHttpInfo (long? uid, string sessionToken, bool? local = null)
        {
            // verify the required parameter 'uid' is set
            if (uid == null)
                throw new ApiException(400, "Missing required parameter 'uid' when calling PresenceApi->V2UserUidPresenceGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling PresenceApi->V2UserUidPresenceGet");

            var localVarPath = "/v2/user/{uid}/presence";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (uid != null) localVarPathParams.Add("uid", Configuration.ApiClient.ParameterToString(uid)); // path parameter
            if (local != null) localVarQueryParams.Add("local", Configuration.ApiClient.ParameterToString(local)); // query parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2UserUidPresenceGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Presence>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Presence) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Presence)));
            
        }

    }
}
