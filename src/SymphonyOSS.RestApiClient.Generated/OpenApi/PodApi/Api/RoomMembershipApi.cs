// Licensed to the Symphony Software Foundation (SSF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SSF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
/* 
 * Pod API
 *
 * This document refers to Symphony API calls that do not need encryption or decryption of content.  - sessionToken can be obtained by calling the authenticationAPI on the symphony back end and the key manager respectively. Refer to the methods described in authenticatorAPI.yaml. - Actions are defined to be atomic, ie will succeed in their entirety or fail and have changed nothing. - If it returns a 40X status then it will have made no change to the system even if ome subset of the request would have succeeded. - If this contract cannot be met for any reason then this is an error and the response code will be 50X. 
 *
 * OpenAPI spec version: current
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client;
using SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Model;

namespace SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRoomMembershipApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Add a member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1AdminRoomIdMembershipAddPost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Add a member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1AdminRoomIdMembershipAddPostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1AdminRoomIdMembershipBanPost (string id, AdminJustifiedUserAction payload, string sessionToken);

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1AdminRoomIdMembershipBanPostWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken);
        /// <summary>
        /// Lists current and previous members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>MembershipList</returns>
        MembershipList V1AdminRoomIdMembershipListGet (string id, string sessionToken, bool? includePastMembers = null);

        /// <summary>
        /// Lists current and previous members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>ApiResponse of MembershipList</returns>
        ApiResponse<MembershipList> V1AdminRoomIdMembershipListGetWithHttpInfo (string id, string sessionToken, bool? includePastMembers = null);
        /// <summary>
        /// Remove a member from a room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1AdminRoomIdMembershipRemovePost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Remove a member from a room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1AdminRoomIdMembershipRemovePostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1AdminRoomIdMembershipUnbanPost (string id, AdminJustifiedUserAction payload, string sessionToken);

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1AdminRoomIdMembershipUnbanPostWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken);
        /// <summary>
        /// Adds new member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1RoomIdMembershipAddPost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Adds new member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1RoomIdMembershipAddPostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Demotes room owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1RoomIdMembershipDemoteOwnerPost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Demotes room owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1RoomIdMembershipDemoteOwnerPostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Lists the members of an existing room.
        /// </summary>
        /// <remarks>
        /// Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>MembershipList</returns>
        MembershipList V1RoomIdMembershipListGet (string id, string sessionToken);

        /// <summary>
        /// Lists the members of an existing room.
        /// </summary>
        /// <remarks>
        /// Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of MembershipList</returns>
        ApiResponse<MembershipList> V1RoomIdMembershipListGetWithHttpInfo (string id, string sessionToken);
        /// <summary>
        /// Promotes user to owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1RoomIdMembershipPromoteOwnerPost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Promotes user to owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1RoomIdMembershipPromoteOwnerPostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Removes member from an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        SuccessResponse V1RoomIdMembershipRemovePost (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Removes member from an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        ApiResponse<SuccessResponse> V1RoomIdMembershipRemovePostWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Lists current members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>MembershipList</returns>
        MembershipList V2RoomIdMembershipListGet (string id, string sessionToken);

        /// <summary>
        /// Lists current members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of MembershipList</returns>
        ApiResponse<MembershipList> V2RoomIdMembershipListGetWithHttpInfo (string id, string sessionToken);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Add a member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipAddPostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Add a member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipAddPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipBanPostAsync (string id, AdminJustifiedUserAction payload, string sessionToken);

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipBanPostAsyncWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken);
        /// <summary>
        /// Lists current and previous members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>Task of MembershipList</returns>
        System.Threading.Tasks.Task<MembershipList> V1AdminRoomIdMembershipListGetAsync (string id, string sessionToken, bool? includePastMembers = null);

        /// <summary>
        /// Lists current and previous members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipList>> V1AdminRoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken, bool? includePastMembers = null);
        /// <summary>
        /// Remove a member from a room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipRemovePostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Remove a member from a room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipRemovePostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipUnbanPostAsync (string id, AdminJustifiedUserAction payload, string sessionToken);

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipUnbanPostAsyncWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken);
        /// <summary>
        /// Adds new member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipAddPostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Adds new member to an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipAddPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Demotes room owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipDemoteOwnerPostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Demotes room owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipDemoteOwnerPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Lists the members of an existing room.
        /// </summary>
        /// <remarks>
        /// Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of MembershipList</returns>
        System.Threading.Tasks.Task<MembershipList> V1RoomIdMembershipListGetAsync (string id, string sessionToken);

        /// <summary>
        /// Lists the members of an existing room.
        /// </summary>
        /// <remarks>
        /// Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipList>> V1RoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken);
        /// <summary>
        /// Promotes user to owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipPromoteOwnerPostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Promotes user to owner.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipPromoteOwnerPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Removes member from an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipRemovePostAsync (string id, UserId payload, string sessionToken);

        /// <summary>
        /// Removes member from an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipRemovePostAsyncWithHttpInfo (string id, UserId payload, string sessionToken);
        /// <summary>
        /// Lists current members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of MembershipList</returns>
        System.Threading.Tasks.Task<MembershipList> V2RoomIdMembershipListGetAsync (string id, string sessionToken);

        /// <summary>
        /// Lists current members of an existing room.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        System.Threading.Tasks.Task<ApiResponse<MembershipList>> V2RoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RoomMembershipApi : IRoomMembershipApi
    {
        private SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomMembershipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RoomMembershipApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RoomMembershipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RoomMembershipApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Add a member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1AdminRoomIdMembershipAddPost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1AdminRoomIdMembershipAddPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1AdminRoomIdMembershipAddPostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");

            var localVarPath = "/v1/admin/room/{id}/membership/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Add a member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipAddPostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1AdminRoomIdMembershipAddPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipAddPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipAddPost");

            var localVarPath = "/v1/admin/room/{id}/membership/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1AdminRoomIdMembershipBanPost (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1AdminRoomIdMembershipBanPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1AdminRoomIdMembershipBanPostWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");

            var localVarPath = "/v1/admin/room/{id}/membership/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipBanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipBanPostAsync (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1AdminRoomIdMembershipBanPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PROVISIONAL As an admin, ban a user from a room, removing the user from the room if necessary. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipBanPostAsyncWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipBanPost");

            var localVarPath = "/v1/admin/room/{id}/membership/ban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipBanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Lists current and previous members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>MembershipList</returns>
        public MembershipList V1AdminRoomIdMembershipListGet (string id, string sessionToken, bool? includePastMembers = null)
        {
             ApiResponse<MembershipList> localVarResponse = V1AdminRoomIdMembershipListGetWithHttpInfo(id, sessionToken, includePastMembers);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists current and previous members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>ApiResponse of MembershipList</returns>
        public ApiResponse< MembershipList > V1AdminRoomIdMembershipListGetWithHttpInfo (string id, string sessionToken, bool? includePastMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipListGet");

            var localVarPath = "/v1/admin/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includePastMembers != null) localVarQueryParams.Add("includePastMembers", Configuration.ApiClient.ParameterToString(includePastMembers)); // query parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

        /// <summary>
        /// Lists current and previous members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>Task of MembershipList</returns>
        public async System.Threading.Tasks.Task<MembershipList> V1AdminRoomIdMembershipListGetAsync (string id, string sessionToken, bool? includePastMembers = null)
        {
             ApiResponse<MembershipList> localVarResponse = await V1AdminRoomIdMembershipListGetAsyncWithHttpInfo(id, sessionToken, includePastMembers);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists current and previous members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <param name="includePastMembers">If true, the membership list will include past members of the stream. If false, the listing will only incude current members. Default false. (optional)</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MembershipList>> V1AdminRoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken, bool? includePastMembers = null)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipListGet");

            var localVarPath = "/v1/admin/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (includePastMembers != null) localVarQueryParams.Add("includePastMembers", Configuration.ApiClient.ParameterToString(includePastMembers)); // query parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

        /// <summary>
        /// Remove a member from a room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1AdminRoomIdMembershipRemovePost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1AdminRoomIdMembershipRemovePostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a member from a room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1AdminRoomIdMembershipRemovePostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");

            var localVarPath = "/v1/admin/room/{id}/membership/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Remove a member from a room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipRemovePostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1AdminRoomIdMembershipRemovePostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a member from a room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipRemovePostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipRemovePost");

            var localVarPath = "/v1/admin/room/{id}/membership/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1AdminRoomIdMembershipUnbanPost (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1AdminRoomIdMembershipUnbanPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1AdminRoomIdMembershipUnbanPostWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");

            var localVarPath = "/v1/admin/room/{id}/membership/unban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipUnbanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1AdminRoomIdMembershipUnbanPostAsync (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1AdminRoomIdMembershipUnbanPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// PROVISIONAL As an admin, lift a room membershp ban from a user. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1AdminRoomIdMembershipUnbanPostAsyncWithHttpInfo (string id, AdminJustifiedUserAction payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1AdminRoomIdMembershipUnbanPost");

            var localVarPath = "/v1/admin/room/{id}/membership/unban";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1AdminRoomIdMembershipUnbanPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Adds new member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1RoomIdMembershipAddPost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1RoomIdMembershipAddPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adds new member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1RoomIdMembershipAddPostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");

            var localVarPath = "/v1/room/{id}/membership/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Adds new member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipAddPostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1RoomIdMembershipAddPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adds new member to an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipAddPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipAddPost");

            var localVarPath = "/v1/room/{id}/membership/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Demotes room owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1RoomIdMembershipDemoteOwnerPost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1RoomIdMembershipDemoteOwnerPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Demotes room owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1RoomIdMembershipDemoteOwnerPostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");

            var localVarPath = "/v1/room/{id}/membership/demoteOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipDemoteOwnerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Demotes room owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipDemoteOwnerPostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1RoomIdMembershipDemoteOwnerPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Demotes room owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipDemoteOwnerPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipDemoteOwnerPost");

            var localVarPath = "/v1/room/{id}/membership/demoteOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipDemoteOwnerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Lists the members of an existing room. Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>MembershipList</returns>
        public MembershipList V1RoomIdMembershipListGet (string id, string sessionToken)
        {
             ApiResponse<MembershipList> localVarResponse = V1RoomIdMembershipListGetWithHttpInfo(id, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists the members of an existing room. Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of MembershipList</returns>
        public ApiResponse< MembershipList > V1RoomIdMembershipListGetWithHttpInfo (string id, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipListGet");

            var localVarPath = "/v1/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

        /// <summary>
        /// Lists the members of an existing room. Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of MembershipList</returns>
        public async System.Threading.Tasks.Task<MembershipList> V1RoomIdMembershipListGetAsync (string id, string sessionToken)
        {
             ApiResponse<MembershipList> localVarResponse = await V1RoomIdMembershipListGetAsyncWithHttpInfo(id, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists the members of an existing room. Lists the members of an existing room. If the requesting user is an administrator, lists current and previous members. If the requesting user is a regular user, lists only current members. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MembershipList>> V1RoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipListGet");

            var localVarPath = "/v1/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

        /// <summary>
        /// Promotes user to owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1RoomIdMembershipPromoteOwnerPost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1RoomIdMembershipPromoteOwnerPostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Promotes user to owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1RoomIdMembershipPromoteOwnerPostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");

            var localVarPath = "/v1/room/{id}/membership/promoteOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipPromoteOwnerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Promotes user to owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipPromoteOwnerPostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1RoomIdMembershipPromoteOwnerPostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Promotes user to owner. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipPromoteOwnerPostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipPromoteOwnerPost");

            var localVarPath = "/v1/room/{id}/membership/promoteOwner";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipPromoteOwnerPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Removes member from an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>SuccessResponse</returns>
        public SuccessResponse V1RoomIdMembershipRemovePost (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = V1RoomIdMembershipRemovePostWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Removes member from an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of SuccessResponse</returns>
        public ApiResponse< SuccessResponse > V1RoomIdMembershipRemovePostWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");

            var localVarPath = "/v1/room/{id}/membership/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Removes member from an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of SuccessResponse</returns>
        public async System.Threading.Tasks.Task<SuccessResponse> V1RoomIdMembershipRemovePostAsync (string id, UserId payload, string sessionToken)
        {
             ApiResponse<SuccessResponse> localVarResponse = await V1RoomIdMembershipRemovePostAsyncWithHttpInfo(id, payload, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Removes member from an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="payload"></param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (SuccessResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SuccessResponse>> V1RoomIdMembershipRemovePostAsyncWithHttpInfo (string id, UserId payload, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");
            // verify the required parameter 'payload' is set
            if (payload == null)
                throw new ApiException(400, "Missing required parameter 'payload' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V1RoomIdMembershipRemovePost");

            var localVarPath = "/v1/room/{id}/membership/remove";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter
            if (payload != null && payload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(payload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = payload; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V1RoomIdMembershipRemovePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SuccessResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SuccessResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SuccessResponse)));
            
        }

        /// <summary>
        /// Lists current members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>MembershipList</returns>
        public MembershipList V2RoomIdMembershipListGet (string id, string sessionToken)
        {
             ApiResponse<MembershipList> localVarResponse = V2RoomIdMembershipListGetWithHttpInfo(id, sessionToken);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Lists current members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>ApiResponse of MembershipList</returns>
        public ApiResponse< MembershipList > V2RoomIdMembershipListGetWithHttpInfo (string id, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V2RoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V2RoomIdMembershipListGet");

            var localVarPath = "/v2/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2RoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

        /// <summary>
        /// Lists current members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of MembershipList</returns>
        public async System.Threading.Tasks.Task<MembershipList> V2RoomIdMembershipListGetAsync (string id, string sessionToken)
        {
             ApiResponse<MembershipList> localVarResponse = await V2RoomIdMembershipListGetAsyncWithHttpInfo(id, sessionToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Lists current members of an existing room. 
        /// </summary>
        /// <exception cref="SymphonyOSS.RestApiClient.Generated.OpenApi.PodApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Room streamId</param>
        /// <param name="sessionToken">Session authentication token.</param>
        /// <returns>Task of ApiResponse (MembershipList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MembershipList>> V2RoomIdMembershipListGetAsyncWithHttpInfo (string id, string sessionToken)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling RoomMembershipApi->V2RoomIdMembershipListGet");
            // verify the required parameter 'sessionToken' is set
            if (sessionToken == null)
                throw new ApiException(400, "Missing required parameter 'sessionToken' when calling RoomMembershipApi->V2RoomIdMembershipListGet");

            var localVarPath = "/v2/room/{id}/membership/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (sessionToken != null) localVarHeaderParams.Add("sessionToken", Configuration.ApiClient.ParameterToString(sessionToken)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("V2RoomIdMembershipListGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MembershipList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MembershipList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MembershipList)));
            
        }

    }
}
